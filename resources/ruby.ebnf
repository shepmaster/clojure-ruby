<program>          = [statement] (<statement-term> [statement])* <[statement-term]> S
<statement>        = bare-statement
<single-statement> = bare-statement <statement-term>
<bare-statement>   = NLES primary-expr
<statement-term>   = NLES ("\n" | ";")
<empty-statements> = <statement-term>* NLES

<primary-expr> = assignment-x

<assignment-x>            = assignment
                          | assignment-mutate
                          | assignment-bracket
                          | assignment-bracket-mutate
                          | method-call-logic-x
assignment                = id assignment-rhs
assignment-mutate         = id assignment-mutate-rhs
assignment-bracket        = bracket-common assignment-rhs
assignment-bracket-mutate = bracket-common assignment-mutate-rhs
<assignment-rhs>          = NLES <"="> S assignment-x
<assignment-mutate-rhs>   = NLES mutator-symbol S assignment-x
<mutator-symbol>          = "+=" | "-="

<method-call-logic-x> = method-call-logic | method-call-relop-x
method-call-logic     = method-call-logic-x NLES logic-symbol S method-call-relop-x
<logic-symbol>        = "&&"

<method-call-relop-x> = method-call-relop | method-call-no-parens-x
method-call-relop     = method-call-relop-x NLES relop-symbol S method-call-relop-x
<relop-symbol>        = "<" | "==" | "!="

<method-call-no-parens-x>  = method-call-no-parens
                           | method-call-self-no-parens
                           | method-call-addition-x
method-call-no-parens      = method-call-no-parens-x <"."> id no-paren-arglist
method-call-self-no-parens = id no-paren-arglist
<no-paren-arglist>         = !grouping NLES primary-expr NLES (<","> S primary-expr)*

<method-call-addition-x> = method-call-addition | method-call-x
method-call-addition     = method-call-addition-x NLES addition-symbol S method-call-addition-x
<addition-symbol>        = "+" | "-"

<method-call-x>     = method-call
                    | method-call-self
                    | method-call-bracket
                    | the-rest
method-call         = method-call-x <"."> id
                    | method-call-x <"."> id paren-arglist
method-call-self    = id paren-arglist
method-call-bracket = bracket-common
<bracket-common>    = method-call-x <"["> [args] <"]">
<paren-arglist>     = <"("> [args] <")">
<args>              = arg (<","> arg)*
<arg>               = S primary-expr S

<the-rest> = flow-control | method-def | class-def | literal | reference | grouping

<flow-control> = if | while | until | case
if             = <"if"> if-branch (<"elsif"> if-branch)* <"end">
if-branch      = predicate program
while          = <"while"> predicate program <"end">
until          = <"until"> predicate program <"end">
case           = <"case"> predicate when+ <"end">
when           = <empty-statements> <"when"> predicate program
<predicate>    = single-statement
flow-keyword   = "if" | "elsif" | "while" | "until" | "case" | "when" | "end"

method-def      = <"def"> S id method-def-args program <"end">
method-def-args = <statement-term>
                | <"("> [def-arg (<","> def-arg)*] <")">
                | NLES id NLES (<","> S id NLES)* <statement-term>
<def-arg>       = S id S
class-def       = <"class"> S id program <"end">
def-keyword     = "def" | "class" | "end"

<literal>  = string | number
string     = <'"'> #"[^\"]+" <'"'>
           | <"'"> #"[^\']+" <"'">
number     = #"\d+"

reference  = id
<grouping> = <"("> statement <")">

keyword = flow-keyword | def-keyword
<id>    = !keyword #"[a-zA-Z_]\w*"

(* Since whitespace gets scattered about, give them smallish, unimportant names *)
<NLES>    = <#"[ \t]*"> (* "Non Line-Ending Space" *)
<S>       = <#"\s*">
