<program>          = [statement] (<statement_term> statement)* <[statement_term]> [S]
<statement>        = bare_statement
<inline_statement> = bare_statement S
<single_statement> = bare_statement <statement_term>
<bare_statement>   = S assignment_x
<statement_term>   = ES ("\n" | ";")

<assignment_x>   = assignment | method_call_infix_x
assignment       = id assignment_rhs
<assignment_rhs> = S <"="> S method_call_infix_x

<method_call_infix_x> = method_call_infix | method_call_x
method_call_infix     = method_call_infix_x S infix_symbol S method_call_infix_x
<infix_symbol>        = "+=" | "-=" | "<" | "==" | "!=" | "&&"

<method_call_x>                = method_call |
                                 method_call_bracket |
                                 method_call_bracket_assignment |
                                 the_rest
method_call                    = method_call_x <"."> id [arglist]
method_call_bracket            = method_call_x <"["> arg <"]">
method_call_bracket_assignment = method_call_x <"["> arg <"]"> assignment_rhs
<arglist>                      = <"("> [arg (<","> arg)*] <")">
<arg>                          = inline_statement

<the_rest> = flow_control | literal | var_ref | grouping

<flow_control> = if | while | until | case
if             = <"if"> predicate program (<"elsif"> predicate program)* <"end">
while          = <"while"> predicate program <"end">
until          = <"until"> predicate program <"end">
case           = <"case"> predicate (S <"when"> predicate program)+ <"end">
<predicate>    = single_statement
keyword        = "if" | "elsif" | "while" | "until" | "case" | "when" | "end"

<literal> = string | number
var_ref = id
<grouping> = <"("> statement <")">

<id>      = !(literal | keyword) #"\w+"

(* Since whitespace gets scattered about, give them small, unimportant names *)
<ES>      = <#"[ \t]*"> (* "Ending Space" *)
<S>       = <#"\s*">

number    = #"\d+"
string    = <'"'> #"[^\"]+" <'"'>
